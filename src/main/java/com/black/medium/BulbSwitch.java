package com.black.medium;

/**
 * 灯泡开关 319
 * @author Citrus
 * @date 2021/11/15 10:09
 */
public class BulbSwitch {
    public int bulbSwitch(int n) {
        //初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。
        //第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。
        //直到第 n 轮，你只需要切换最后一个灯泡的开关。
        //---------------------------------------------
        //也就是说，一个灯泡要处于开启状态的充要条件是，他被切换的次数是奇数
        //由于每i轮就切换每i个灯泡的开关，也就是灯泡如果处于开启状态，那么他的切换次数就等于他的约数
        //问题就变成了，[1,n]这个区间内的数，如果他的约数个数是奇数，就是开着的状态
        //我们知道如果某个数 k 为 x 的约数，那么x/k也是x的约数，即约数总是成对出现的
        //那么某个数的约数个数为奇数，意味着某个约数在分解过程中出现了 22 次，且必然重复出现在同一次拆解中
        //也就是k=x/k，x是完全平方数
        //那么问题就变成了在[1,n]这个区间里面，完全平方数的个数是多少
        //根据数论推论，[1,n]的完全平方数个数为根号n
        return (int) Math.sqrt(n);
    }
}
